@import "compass/css3";


$bgc: #000;
$perspective: 1000px;
$box-length: 200px;
$box-width: 100px;
$box-height: 300px;
$box-color: rgba(20,185,170,.4);
$shadow-base: rgba(255, 255, 0, .3);


*{
	margin: 0;
	padding: 0;
}
body{
	width: 100vw;
	height: 100vh;
	background: radial-gradient(#351454, #2c1146 20% , #1f0c32) no-repeat 100% 100%;
	display: flex;
	justify-content: space-around;
}

//-------------------------------------box----------------------------------------------
@mixin render-basebox($type, $length, $width, $height, $color, $border: 0, $border-color: #000){
	.box{
		width: $length;
		height: $height;
		position: absolute;
		transform-style: preserve-3d;
		figure{
			margin: 0;
			display: block;
			position: absolute;
			background-color: $color;
			border: $border solid $border-color;
			@if($type == 'cube'){
				width: $length - $border*2;
				height: $height - $border*2;
				&.front{
					transform: rotateY(0deg) translateZ($length/2);
				}
				&.back{
					transform: rotateX(180deg) translateZ($length/2);
				}
				&.right{
					transform: rotateY(90deg) translateZ($length/2);
				}
				&.left{
					transform: rotateY(-90deg) translateZ($length/2);
				}
				&.top{
					transform: rotateX(90deg) translateZ($length/2);
				}
				&.bottom{
					transform: rotateX(-90deg) translateZ($length/2);
				}
				
			}
			@else{
				&.front, &.back{
					width: $length - $border*2;
					height: $height - $border*2;
				}
				&.right, &.left{
				  width: $width - $border*2;
				  height: $height - $border*2;
				  left: ($length - $width)/2;
				}
				&.top, &.bottom{
				  width: $length - $border*2;
				  height: $width - $border*2;
				  top: ($height - $width)/2;
				}
				&.front{
					transform: rotateY(0deg) translateZ($width/2);
				}
				&.back{
					transform: rotateX(180deg) translateZ($width/2);
				}
				&.right{
					transform: rotateY(90deg) translateZ($length/2);
				}
				&.left{
					transform: rotateY(-90deg) translateZ($length/2);
				}
				&.top{
					transform: rotateX(90deg) translateZ($height/2);
				}
				&.bottom{
					transform: rotateX(-90deg) translateZ($height/2);
				}

			}
		}
	}
}
.box_container{
	position: relative;
	perspective: $perspective;
	margin-top: 50px;
	@include render-basebox('rectangular', $box-length, $box-width, $box-height, $box-color); 	// $type: 'rectangular' or 'cube'
	.box{
		figure{
			box-shadow: 0 0 8px 0 $shadow-base;
		}

	}
}
// .box_container1{
// 	.box{
// 		transform: rotateY(20deg);
// 	}
// }
//-------------------------------------leader----------------------------------------------
@mixin render-leader($num, $color1, $color2){
	@for $i from 1 through $num{
		&:nth-child(#{$i}){
			@if($i%2 != 0){
				background-color: $color1;
				top: 100%*round(($i+1)/2);
				transform: translateZ(50*round(($i+1)/2)+px);
			}
			@else{
				background-color: $color2;
				top: 100%*(round(($i+1)/2) - 1)+50%;
				transform: rotateX(90deg) translateY(100%*(round(($i+1)/2) - 1)+50%);
			}
		}
	}
}
.leader_container{
	position: relative;
	perspective: $perspective;
	margin-top: 50px;
	.leader{
		width: 50px;
		height: 50px;
		position: absolute;
		transform-style: preserve-3d;
		transform: rotateY(-40deg);
		figure{
			width: 100%;
			height: 100%;
			margin: 0;
			display: block;
			position: absolute;
			background-color: #fff;
			@include render-leader(12, #fff, #000);
		}
	}
}
//------------------------------------butterfly----------------------------------------------
.butterfly_container{
	position: relative;
	perspective: $perspective;
	.butterfly{
		width: 25px;
		height: 50px;
		position: absolute;
		transform-style: preserve-3d;
		transform: rotate3d(0, 1, 0, 0deg);
		animation: butterfly 6s linear infinite;
		.wing{
			width: 100%;
			height: 100%;
			background: radial-gradient(#ff6e02, #ffff00 20% , #ff6e02) no-repeat 100% 100%;
			border-radius: 100%;
			position: absolute;
			-webkit-clip-path: polygon(100% 30%, 60% 5%, 68% 0, 100% 40%, 30% 0%, 0% 80%, 100% 65%, 25% 90%, 100% 100%);
			&.left{
				left: 0;
				transform-origin: 100% 50%;
				transform: rotateX(90deg) rotateY(0deg);
				animation: butterfly1 .3s ease infinite;
			}
			&.right{
				right: 0;
				transform-origin: 100% 50%;
				transform: rotateX(90deg) rotateY(180deg);
				animation: butterfly2 .3s ease infinite;
			}
		}
	}
}
@keyframes butterfly{
	0%{
		transform: rotate3d(0, 1, 0, 0deg) translate3d(-300px, 350px, 0px);
	}
	100%{
		transform: rotate3d(0, 1, 0, -360deg) translate3d(-300px, 350px, 0px);
	}
}
@keyframes butterfly1{
	0%{
		transform: rotateX(90deg) rotateY(0deg);
	}
	50%{
		transform: rotateX(90deg) rotateY(70deg);
	}
	100%{
		transform: rotateX(90deg) rotateY(0deg);
	}
}
@keyframes butterfly2{
	0%{
		transform: rotateX(90deg) rotateY(180deg);
	}
	50%{
		transform: rotateX(90deg) rotateY(110deg);
	}
	100%{
		transform: rotateX(90deg) rotateY(180deg);
	}
}
//------------------------------------carousel----------------------------------------------
$carousel-width: 210px;
$carousel-height: 140px;
$carousel-gap: 20px;
$carousel-border: 2px;
$carousel-num: 9;

// @function cul-carouselTZ($num, $width) {
//   @return round($width/2)/tan(180deg/$num);
// }

$carousel-tz: round($carousel-width/2)/tan(180deg/$carousel-num)+px;

@mixin render($num, $bgc, $translateZ, $rotateX:0, $clippath: none){
	@for $i from 0 through $num{
		&:nth-child(#{$i+1}){
			background-color: $bgc;
			transform: rotateY(360/$num*$i+deg) translateZ($translateZ) rotateX($rotateX);
			-webkit-clip-path: $clippath;
		}
	}
}
.carousel_container{
	width: $carousel-width;
	height: $carousel-height;
	position: relative;
	perspective: $perspective;
	.carousel{
		width: 100%;
		height: 100%;
		position: absolute;
		transform-style: preserve-3d;
		figure{
			margin: 0;
			display: block;
			position: absolute;
			width: $carousel-width - $carousel-gap - $carousel-border*2;
			height: $carousel-height - $carousel-border*2;
			left: $carousel-gap/2;
			top: 0;
			border: $carousel-border solid black;
			@include render($carousel-num, rgba(50, 150, 50, .6), $carousel-tz);
		}
	}
}